SET SERVEROUTPUT ON
BEGIN
  FOR t IN (SELECT table_name FROM user_tables) LOOP
    BEGIN
      EXECUTE IMMEDIATE 'DROP TABLE "' || t.table_name || '" CASCADE CONSTRAINTS';
      DBMS_OUTPUT.PUT_LINE('Dropped table: ' || t.table_name);
    EXCEPTION
      WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('Skipped table: ' || t.table_name || ' (' || SQLERRM || ')');
    END;
  END LOOP;
END;
/


CREATE TABLE EMPLOYES(
   CODEE NUMBER(6) GENERATED ALWAYS AS IDENTITY PRIMARY KEY,
   NOME VARCHAR2(50),
   PRENOME VARCHAR2(50),
   RUEPERSE VARCHAR2(50),
   CPOSTALPERSE VARCHAR2(5),
   VILLEPERSE VARCHAR2(50),
   RUEPROE VARCHAR2(50),
   CPOSTALPROE VARCHAR2(5),
   VILLEPROE VARCHAR2(50),
   TELPERSE VARCHAR2(10),
   TELPROE VARCHAR2(10),
   CONSTRAINT CHK_EMPLOYES_CODEE_POSITIVE CHECK (CODEE > 0),
   CONSTRAINT chk_EMPLOYES_CPOSTALPERSE_format CHECK (REGEXP_LIKE(CPOSTALPERSE, '[0-9]{5}$')),
   CONSTRAINT chk_EMPLOYES_CPOSTALPROE_format CHECK (REGEXP_LIKE(CPOSTALPROE, '[0-9]{5}$')),
   CONSTRAINT chk_EMPLOYER_TELPERSE_format CHECK (REGEXP_LIKE(TELPERSE, '[0-9]{10}$')),
   CONSTRAINT chk_EMPLOYER_TELPROE_format CHECK (REGEXP_LIKE(TELPROE, '[0-9]{10}$'))
);

CREATE TABLE QUALIFICATIONS(
   CODEQ NUMBER(6) GENERATED ALWAYS AS IDENTITY PRIMARY KEY,
   NOMQ VARCHAR2(50),
   TAUXMINQ NUMBER(10,2),
   CODEQ_EST_COMPLETEE NUMBER(6),
   FOREIGN KEY(CODEQ_EST_COMPLETEE) REFERENCES QUALIFICATIONS(CODEQ),
   CONSTRAINT CHK_QUALIFICATIO_CODEE_POSITIVE CHECK (CODEQ > 0),
   CONSTRAINT CHK_QUALIFICATION_TAUXMINQ_POSITIVE CHECK (TAUXMINQ > 0)
);

CREATE TABLE USINES(
   CODEU NUMBER(6) GENERATED ALWAYS AS IDENTITY PRIMARY KEY,
   NOMU VARCHAR2(50),
   RUEU VARCHAR2(50),
   CPOSTALU VARCHAR2(5),
   VILLEU VARCHAR2(50),
   TELU VARCHAR2(10),
   CONSTRAINT CHK_USINES_CODEU_POSITIVE CHECK (CODEU > 0),
   CONSTRAINT chk_USINES_CPOSTALU_format CHECK (REGEXP_LIKE(CPOSTALU, '[0-9]{5}$')),
   CONSTRAINT chk_USINES_TELU_format CHECK (REGEXP_LIKE(TELU, '[0-9]{10}$'))
);

CREATE TABLE TYPEU(
   CODETU NUMBER(6) GENERATED ALWAYS AS IDENTITY PRIMARY KEY,
   NOMTU VARCHAR2(20),
   CONSTRAINT CHK_TYPEU_CODETU_POSITIVE CHECK (CODETU > 0),
   CONSTRAINT CHK_TYPEU_NOMTU_ENUM CHECK (NOMTU IN ('chaine assemblage', 'scierie', 'métallurgie', 'fonderie'))
);

CREATE TABLE GAMME(
   CODEG CHAR(3) PRIMARY KEY,
   NOMG VARCHAR2(50),
   CONSTRAINT chk_codeG_format CHECK (REGEXP_LIKE(codeG, '^G[0-9]{2}$')),
   CONSTRAINT CHK_GAMME_NOMG_ENUM CHECK (NOMG IN ('jardin et piscine','mobilier intérieur','plomberie et chauffage','salle de bain et WC','luminaire, électricité et domotique','quincaillerie','cuisine','peinture et droguerie','carrelage et parquet','matériaux de construction'))
);

---------------------------------------------------------
-- 🗓️ TABLES CALENDRIERS
---------------------------------------------------------

CREATE TABLE CALENDRIER1(
   DATEFAB DATE PRIMARY KEY
);

CREATE OR REPLACE TRIGGER trg_cal1_datefab_check
BEFORE INSERT OR UPDATE ON CALENDRIER1
FOR EACH ROW
BEGIN
  IF :NEW.DATEFAB > TRUNC(SYSDATE) THEN
    RAISE_APPLICATION_ERROR(-20000, 'DATEFAB ne peut pas être dans le futur.');
  END IF;
END;
/


CREATE TABLE CALENDRIER2(
   DATEDEBUTDIR DATE PRIMARY KEY
);

CREATE OR REPLACE TRIGGER trg_cal2_datefab_check
BEFORE INSERT OR UPDATE ON CALENDRIER2
FOR EACH ROW
BEGIN
  IF :NEW.DATEDEBUTDIR > TRUNC(SYSDATE) THEN
    RAISE_APPLICATION_ERROR(-20000, 'DATEDEBUTDIR ne peut pas être dans le futur.');
  END IF;
END;
/


CREATE TABLE CALENDRIER3(
   MOIS NUMBER(2) NOT NULL,
   ANNEE NUMBER(4) NOT NULL,
   PRIMARY KEY(MOIS, ANNEE),
   CONSTRAINT CHK_CAL3_MOIS_POSITIVE CHECK (MOIS >= 1 AND MOIS <= 12)
);

CREATE OR REPLACE TRIGGER trg_cal3_annee_check
BEFORE INSERT OR UPDATE ON CALENDRIER3
FOR EACH ROW
BEGIN
  IF :NEW.ANNEE > EXTRACT(YEAR FROM SYSDATE) THEN
    RAISE_APPLICATION_ERROR(-20001, 'L''année ne peut pas être supérieure à l''année courante.');
  END IF;
END;
/

CREATE TABLE CALENDRIER4(
   ANNEE NUMBER(4) PRIMARY KEY
);

CREATE OR REPLACE TRIGGER trg_cal4_annee_check
BEFORE INSERT OR UPDATE ON CALENDRIER4
FOR EACH ROW
BEGIN
  IF :NEW.ANNEE > EXTRACT(YEAR FROM SYSDATE) THEN
    RAISE_APPLICATION_ERROR(-20001, 'L''année ne peut pas être supérieure à l''année courante.');
  END IF;
END;
/

---------------------------------------------------------
-- 🏢 TABLES DÉPENDANTES
---------------------------------------------------------

CREATE TABLE DEPARTEMENTS(
   CODED NUMBER(6) GENERATED ALWAYS AS IDENTITY PRIMARY KEY,
   NOMD VARCHAR2(15) NOT NULL,
   CODEU NUMBER(6) NOT NULL,
   FOREIGN KEY(CODEU) REFERENCES USINES(CODEU),
   CONSTRAINT CHK_EMPLOYES_CODED_POSITIVE CHECK (CODED > 0),
   CONSTRAINT CHK_DEPARTEMENTS_NOMD_ENUM CHECK (NOMD IN ('fabrication','assemblage','RH','expédition','logistique','direction','finance'))
);

CREATE TABLE POINTS_DE_VENTE(
   CODEPV NUMBER(6) GENERATED ALWAYS AS IDENTITY PRIMARY KEY,
   NOMPV VARCHAR2(50),
   RUEPV VARCHAR2(50),
   CPOSTALPV VARCHAR2(5),
   VILLEPV VARCHAR2(50),
   TELPV VARCHAR2(10),
   TYPEPV VARCHAR2(25),
   CONSTRAINT CHK_EMPLOYES_CODEPVD_POSITIVE CHECK (CODEPV > 0),
   CONSTRAINT chk_PDV_CP_format CHECK (REGEXP_LIKE(CPOSTALPV, '[0-9]{5}$')),
   CONSTRAINT chk_PDV_TELPV_format CHECK (REGEXP_LIKE(TELPV, '[0-9]{10}$')),
   CONSTRAINT CHK_PDV_NOMPV_ENUM CHECK (NOMPV IN ('GSB','Brico-Express'))
);

CREATE TABLE PRODUITS(
   CODEP NUMBER(6) GENERATED ALWAYS AS IDENTITY PRIMARY KEY,
   NOMP VARCHAR2(50),
   MARQUEP VARCHAR2(50),
   CODEG CHAR(3) NOT NULL,
   CONSTRAINT FK_PRODUITS_GAMME FOREIGN KEY (CODEG) REFERENCES GAMME(CODEG),
   CONSTRAINT CHK_EMPLOYES_CODEP_POSITIVE CHECK (CODEP > 0)
);

---------------------------------------------------------
-- 👷‍♂️ TABLES D’ASSOCIATION ET RELATIONS
---------------------------------------------------------

CREATE TABLE POSSEDER(
   CODEE NUMBER(6) NOT NULL,
   CODEQ NUMBER(6) NOT NULL,
   PRIMARY KEY(CODEE, CODEQ),
   FOREIGN KEY(CODEE) REFERENCES EMPLOYES(CODEE),
   FOREIGN KEY(CODEQ) REFERENCES QUALIFICATIONS(CODEQ)
);

CREATE TABLE ASSEMBLER(
   CODEP_EST_COMPOSE NUMBER(6) NOT NULL,
   CODEP_COMPOSE NUMBER(6) NOT NULL,
   QTE_ASSEMBL NUMBER(6),
   PRIMARY KEY(CODEP_EST_COMPOSE, CODEP_COMPOSE),
   FOREIGN KEY(CODEP_EST_COMPOSE) REFERENCES PRODUITS(CODEP),
   FOREIGN KEY(CODEP_COMPOSE) REFERENCES PRODUITS(CODEP),
   CONSTRAINT CHK_ASSEMBLER_QTE_ASSEMBL_POSITIVE CHECK (QTE_ASSEMBL > 0)
);

CREATE TABLE TRAVAILLER_USINE(
   CODEE NUMBER(6) NOT NULL,
   CODED NUMBER(6) NOT NULL,
   MOIS NUMBER(2) NOT NULL,
   ANNEE NUMBER(4) NOT NULL,
   NBHEURES_U NUMBER(8,2),
   PRIMARY KEY(CODEE, CODED, MOIS, ANNEE),
   FOREIGN KEY(CODEE) REFERENCES EMPLOYES(CODEE),
   FOREIGN KEY(CODED) REFERENCES DEPARTEMENTS(CODED),
   FOREIGN KEY(MOIS, ANNEE) REFERENCES CALENDRIER3(MOIS, ANNEE),
   CONSTRAINT CHK_USINE_NBHEURES_POSITIVE CHECK (NBHEURES_U > 0)
);

CREATE TABLE AVOIR_TYPE(
   CODEU NUMBER(6) NOT NULL,
   CODETU NUMBER(6) NOT NULL,
   PRIMARY KEY(CODEU, CODETU),
   FOREIGN KEY(CODEU) REFERENCES USINES(CODEU),
   FOREIGN KEY(CODETU) REFERENCES TYPEU(CODETU)
);

CREATE TABLE DIRIGER(
   CODEE NUMBER(6) NOT NULL,
   CODED NUMBER(6) NOT NULL,
   DATEDEBUTDIR DATE NOT NULL,
   PRIMARY KEY(CODEE, CODED, DATEDEBUTDIR),
   FOREIGN KEY(CODEE) REFERENCES EMPLOYES(CODEE),
   FOREIGN KEY(CODED) REFERENCES DEPARTEMENTS(CODED),
   FOREIGN KEY(DATEDEBUTDIR) REFERENCES CALENDRIER2(DATEDEBUTDIR)
);

CREATE TABLE AUTORISER(
   CODEQ NUMBER(6) NOT NULL,
   CODED NUMBER(6) NOT NULL,
   PRIMARY KEY(CODEQ, CODED),
   FOREIGN KEY(CODEQ) REFERENCES QUALIFICATIONS(CODEQ),
   FOREIGN KEY(CODED) REFERENCES DEPARTEMENTS(CODED)
);

CREATE TABLE FABRIQUER_ASSEMBLER1(
   CODEU NUMBER(6) NOT NULL,
   CODEP NUMBER(6) NOT NULL,
   DATEFAB DATE NOT NULL,
   QTE_FAB NUMBER(6),
   PRIMARY KEY(CODEU, CODEP, DATEFAB),
   FOREIGN KEY(CODEU) REFERENCES USINES(CODEU),
   FOREIGN KEY(CODEP) REFERENCES PRODUITS(CODEP),
   FOREIGN KEY(DATEFAB) REFERENCES CALENDRIER1(DATEFAB),
   CONSTRAINT CHK_FAB_QTE_FAB_POSITIVE CHECK (QTE_FAB > 0 )
);

CREATE TABLE RESPONSABLE(
   CODEE NUMBER(6) NOT NULL,
   CODEG CHAR(3) NOT NULL,
   ANNEE NUMBER(4) NOT NULL,
   PRIMARY KEY(CODEE, CODEG, ANNEE),
   FOREIGN KEY(CODEE) REFERENCES EMPLOYES(CODEE),
   FOREIGN KEY(CODEG) REFERENCES GAMME(CODEG),
   FOREIGN KEY(ANNEE) REFERENCES CALENDRIER4(ANNEE)
);

CREATE TABLE PAYER2(
   CODEG CHAR(3) NOT NULL,
   ANNEE NUMBER(4) NOT NULL,
   INDICERETROCESSIONG NUMBER(8,2),
   PRIMARY KEY(CODEG, ANNEE),
   FOREIGN KEY(CODEG) REFERENCES GAMME(CODEG),
   FOREIGN KEY(ANNEE) REFERENCES CALENDRIER4(ANNEE),
   CONSTRAINT CHK_INDICERETROCESSIONG_POSITIVE CHECK (INDICERETROCESSIONG > 0 AND INDICERETROCESSIONG < 1 )
);

CREATE TABLE VENDRE(
   CODEE NUMBER(6) NOT NULL,
   CODEPV NUMBER(6) NOT NULL,
   CODEP NUMBER(6) NOT NULL,
   MOIS NUMBER(2) NOT NULL,
   ANNEE NUMBER(4) NOT NULL,
   QTE_VENDUE NUMBER(6),
   PRIMARY KEY(CODEE, CODEPV, CODEP, MOIS, ANNEE),
   FOREIGN KEY(CODEE) REFERENCES EMPLOYES(CODEE),
   FOREIGN KEY(CODEPV) REFERENCES POINTS_DE_VENTE(CODEPV),
   FOREIGN KEY(CODEP) REFERENCES PRODUITS(CODEP),
   FOREIGN KEY(MOIS, ANNEE) REFERENCES CALENDRIER3(MOIS, ANNEE),
   CONSTRAINT CHK_VENDRE_QTE_VENDUE_POSITIVE CHECK (QTE_VENDUE > 0 )
);

CREATE TABLE FACTURER(
   CODEP NUMBER(6) NOT NULL,
   MOIS NUMBER(2) NOT NULL,
   ANNEE NUMBER(4) NOT NULL,
   PRIXUNITP NUMBER(10,2),
   PRIMARY KEY(CODEP, MOIS, ANNEE),
   FOREIGN KEY(CODEP) REFERENCES PRODUITS(CODEP),
   FOREIGN KEY(MOIS, ANNEE) REFERENCES CALENDRIER3(MOIS, ANNEE),
   CONSTRAINT CHK_PRIXUNITP_POSITIVE CHECK (PRIXUNITP > 0)
);

CREATE TABLE PAYER1(
   CODEE NUMBER(6) NOT NULL,
   ANNEE NUMBER(4) NOT NULL,
   FIXEMENSUELE NUMBER(10,2),
   INDICESALE NUMBER(4),
   PRIMARY KEY(CODEE, ANNEE),
   FOREIGN KEY(CODEE) REFERENCES EMPLOYES(CODEE),
   FOREIGN KEY(ANNEE) REFERENCES CALENDRIER4(ANNEE),
   CONSTRAINT CHK_FIXEMENSUELE_POSITIVE CHECK (FIXEMENSUELE > 0),
   CONSTRAINT CHK_INDICESALE_POSITIVE CHECK (INDICESALE > 0)
);

CREATE TABLE TRAVAILLER_PT_VENTE(
   CODEE NUMBER(6) NOT NULL,
   CODEPV NUMBER(6) NOT NULL,
   MOIS NUMBER(2) NOT NULL,
   ANNEE NUMBER(4) NOT NULL,
   NBHEURES_PV NUMBER(8,2),
   PRIMARY KEY(CODEE, CODEPV, MOIS, ANNEE),
   FOREIGN KEY(CODEE) REFERENCES EMPLOYES(CODEE),
   FOREIGN KEY(CODEPV) REFERENCES POINTS_DE_VENTE(CODEPV),
   FOREIGN KEY(MOIS, ANNEE) REFERENCES CALENDRIER3(MOIS, ANNEE),
   CONSTRAINT CHK_PDV_NBHEURES_PV_POSITIVE CHECK (NBHEURES_PV > 0)
);
